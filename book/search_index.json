[
["ml-industry.html", "Corporate Portfolio Bab 1 Telecommunication 1.1 Customer Churn Prediction Bab 2 Finance 2.1 Credit Risk Analysis 2.2 Evaluating Customer Financial Complaints Bab 3 Retail 3.1 E-Commerce Clothing Reviews Bab 4 Insurance 4.1 Prediction of Total Claim Amount", " Corporate Portfolio Team Algoritma April 24, 2020 Bab 1 Telecommunication 1.1 Customer Churn Prediction 1.1.1 Background Customer Churn didefinisikan sebagai kecenderungan pelanggan untuk berhenti melakukan interaksi dengan sebuah perusahaan. Perusahaan telekomunikasi memiliki kebutuhan untuk mengetahui customer yang akan berhenti berlangganan atau tidak, karena biaya mempertahankan pelanggan yang sudah ada jauh lebih sedikit dibandingkan memperoleh pelanggan baru. Perusahaan biasanya mendefinisikan 2 tipe customer churn, yaitu voluntary churn dan involuntary churn. Voluntary churn merupakan pelanggan yang sengaja berhenti dan beralih ke perusahaan lain, sedangkan involuntary churn merupakan pelanggan yang berhenti karena perpindahan lokasi, kematian, atau alasan lain yang sulit dikontrol. Analisis voluntary churn tentunya tidak sulit untuk mempelajari karakteristik pelanggan yang dapat dilihat dari data profil pelanggan. Permasalah diatas dapat dijawab dengan membuat model prediksi customer churn. Harapannya dengan adanya model prediksi customer churn, dapat mempermudah pihak perusahaan telekomunikasi untuk memperoleh informasi mengenai pelanggan yang berpeluang besar untuk churn. 1.1.2 Modelling Analysis 1.1.2.1 Import Data Data yang digunakan merupakan data profil pelanggan perusahaan telekomunikasi yang diperoleh dar link berikut. Data tersebut berisikan 7043 observasi dengan 21 kolom. Target variabel pada data ini adalah Churn, kita akan memprediksi apakah pelanggan akan berhenti berlangganan produk atau akan tetep berlangganan. customer &lt;- read.csv(&quot;assets/01-telco/WA_Fn-UseC_-Telco-Customer-Churn.csv&quot;) head(customer) #&gt; customerID gender SeniorCitizen Partner Dependents tenure PhoneService #&gt; 1 7590-VHVEG Female 0 Yes No 1 No #&gt; 2 5575-GNVDE Male 0 No No 34 Yes #&gt; 3 3668-QPYBK Male 0 No No 2 Yes #&gt; 4 7795-CFOCW Male 0 No No 45 No #&gt; 5 9237-HQITU Female 0 No No 2 Yes #&gt; 6 9305-CDSKC Female 0 No No 8 Yes #&gt; MultipleLines InternetService OnlineSecurity OnlineBackup DeviceProtection #&gt; 1 No phone service DSL No Yes No #&gt; 2 No DSL Yes No Yes #&gt; 3 No DSL Yes Yes No #&gt; 4 No phone service DSL Yes No Yes #&gt; 5 No Fiber optic No No No #&gt; 6 Yes Fiber optic No No Yes #&gt; TechSupport StreamingTV StreamingMovies Contract PaperlessBilling #&gt; 1 No No No Month-to-month Yes #&gt; 2 No No No One year No #&gt; 3 No No No Month-to-month Yes #&gt; 4 Yes No No One year No #&gt; 5 No No No Month-to-month Yes #&gt; 6 No Yes Yes Month-to-month Yes #&gt; PaymentMethod MonthlyCharges TotalCharges Churn #&gt; 1 Electronic check 29.85 29.85 No #&gt; 2 Mailed check 56.95 1889.50 No #&gt; 3 Mailed check 53.85 108.15 Yes #&gt; 4 Bank transfer (automatic) 42.30 1840.75 No #&gt; 5 Electronic check 70.70 151.65 Yes #&gt; 6 Electronic check 99.65 820.50 Yes Berikut ini merupakan deskripsi untuk setiap variabel: CustomerID: Customer ID Gender: Gender pelanggan yaitu Female dan Male SeniorCitizen: Apakah pelanggan merupakan senio citizen (0: No, 1: Yes) Partner: Apakah pelanggan memiliki partner atau tidak (Yes, No) Dependents: Apakah pelanggan memiliki tanggungan atau tidak (Yes, No) Tenure: Jumlah bulan dalam menggunakan produk perusahaan MultipleLines: Apakah pelanggan memiliki banyak saluran atau tidak (Yes, No, No phone service) OnlineSecurity: Apakah pelanggan memiliki keamanan online atau tidak OnlineBackup: Apakah pelanggan memiliki cadangan online atau tidak DeviceProtection: Apakah pelanggan memiliki perlindungan perangkat atau tidak TechSupport: Apakah pelanggan memiliki dukungan teknis atau tidak StreamingTV: Apakah pelanggan berlangganan TV streaming atau tidak StreamingMovies: Apakah pelanggan berlangganan movies streaming atau tidak Contract: Ketentuan kontrak berlangganan (Month-to-month, One year, Two year) PaperlessBilling: Apakah pelanggan memiliki tagihan tanpa kertas atau tidak (Yes, No) PaymentMethod: Metode pembayaran (Electronic check, Mailed check, Bank transfer (automatic), Credit card (automatic)) MonthlyCharges: Jumlah pembayaran yang dilakukan setiap bulan TotalCharges: Jumlah total yang dibebankan oleh pelanggan Churn: Apakah pelanggan Churn atau tidak (Yes or No) 1.1.2.2 Exploratory Data Sebelum eksplorasi lebih lanjut, perlu diketahui kelengkapan data yang dimiliki: colSums(is.na(customer)) #&gt; customerID gender SeniorCitizen Partner #&gt; 0 0 0 0 #&gt; Dependents tenure PhoneService MultipleLines #&gt; 0 0 0 0 #&gt; InternetService OnlineSecurity OnlineBackup DeviceProtection #&gt; 0 0 0 0 #&gt; TechSupport StreamingTV StreamingMovies Contract #&gt; 0 0 0 0 #&gt; PaperlessBilling PaymentMethod MonthlyCharges TotalCharges #&gt; 0 0 0 11 #&gt; Churn #&gt; 0 Dari 7043 observasi ternyata terdapat missing values sebanyak 11 observasi pada kolom TotalCharges. Karena jumlah missing values cukup sedikit kita dapat membuat observasi tersebut. Selain itu, perlu kita buang variabel yang tidak dibutuhkan pada pemodelan yaitu customerID dan juga sesuaikan tipe data yang seharusnya. customer &lt;- customer %&gt;% select(-customerID) %&gt;% na.omit() %&gt;% mutate(SeniorCitizen = as.factor(SeniorCitizen)) Untuk mengetahui proporsi kelas pada setiap variable kategori, kita dapat menggunakan function inspect_cat dari package inspectdf seperti berikut: customer %&gt;% inspect_cat() %&gt;% show_plot() Dari hasil plot diatas dapat diketahui proporsi kelas untuk target variabel cenderung lebih banyak dikategori No namun masih seimbang. Sedangkan untuk variabel lainnya untuk proporsi setiap level nya mayoritas seimbang. Berikutnya kita dapat eksplorasi persebaran untuk variabel data numerik dengan function inspect_num dari package inspectdf seperti berikut: customer %&gt;% inspect_num() %&gt;% show_plot() Dari ketiga variabel numerik yang dimiliki, persebaran data cukup beragam untuk setiap nilai. 1.1.2.3 Modelling Sebelum masuk ke tahap modelling, kita perlu membagi data menjadi data_train dan data_test dengan proporsi 80:20. set.seed(100) idx &lt;- initial_split(data = customer,prop = 0.8,strata = Churn) data_train &lt;- training(idx) data_test &lt;- testing(idx) Berikutnya bentuk model random forest menggunakan package caret, tentukan banyaknya cross validation dan repetition pada model dan juga target variabel dan prediktor yang digunakan. set.seed(100) ctrl &lt;- trainControl(method=&quot;repeatedcv&quot;, number=5, repeats=3) # model_forest &lt;- train(Churn ~ ., data=data_train, method=&quot;rf&quot;, trControl = ctrl) import model yang sudah dijalankan pada chunk sebelumnya menggunakan readRDS. #saveRDS(model_forest,&quot;assets/01-telco/model_forest.rds&quot;) model_forest &lt;- readRDS(&quot;assets/01-telco/model_forest.rds&quot;) model_forest #&gt; Random Forest #&gt; #&gt; 5627 samples #&gt; 19 predictor #&gt; 2 classes: &#39;No&#39;, &#39;Yes&#39; #&gt; #&gt; No pre-processing #&gt; Resampling: Cross-Validated (5 fold, repeated 3 times) #&gt; Summary of sample sizes: 4501, 4502, 4501, 4502, 4502, 4501, ... #&gt; Resampling results across tuning parameters: #&gt; #&gt; mtry Accuracy Kappa #&gt; 2 0.7837817 0.3252122 #&gt; 16 0.7750746 0.3779712 #&gt; 30 0.7731203 0.3727503 #&gt; #&gt; Accuracy was used to select the optimal model using the largest value. #&gt; The final value used for the model was mtry = 2. Dari hasil yang diperoleh pada model_forest, didapatkan accuraci sebesar 0.78 dengan mtry sebanyak 2. Selanjutnya, akan dilakukan tuning model dengan melakukan upsample data. Artinya, kita akan membuat proporsi dari target variabel sama besar. up_train &lt;- upSample(x = data_train[,-20], y = data_train$Churn, yname = &quot;Churn&quot;) Dilakukan pembuat model random forest dengan data upsample: set.seed(100) # ctrl &lt;- trainControl(method=&quot;repeatedcv&quot;, number=5, repeats=3) # forest_upc &lt;- train(Churn ~ ., data=up_train, method=&quot;rf&quot;, trControl = ctrl) #saveRDS(forest_upc,&quot;assets/01-telco/model_caret.rds&quot;) forest_upc &lt;- readRDS(&quot;assets/01-telco/model_caret.rds&quot;) Dari hasil model kedua diperoleh hasil sebagai berikut: forest_upc #&gt; Random Forest #&gt; #&gt; 8262 samples #&gt; 19 predictor #&gt; 2 classes: &#39;No&#39;, &#39;Yes&#39; #&gt; #&gt; No pre-processing #&gt; Resampling: Cross-Validated (5 fold, repeated 3 times) #&gt; Summary of sample sizes: 6609, 6610, 6609, 6610, 6610, 6610, ... #&gt; Resampling results across tuning parameters: #&gt; #&gt; mtry Accuracy Kappa #&gt; 2 0.7760017 0.5520022 #&gt; 16 0.8911472 0.7822945 #&gt; 30 0.8875167 0.7750336 #&gt; #&gt; Accuracy was used to select the optimal model using the largest value. #&gt; The final value used for the model was mtry = 16. Setelah dilakukan upsample data, terlihat nilai accuracy yang diperoleh lebih besar dibandingkan model sebelumnya sebesar 0.89 dengan mtry sebanyak 16. Selanjutnya, akan dilakukan prediksi terhadap data_test: pred &lt;- predict(forest_upc,newdata = data_test,type = &quot;prob&quot;) pred$result &lt;- as.factor(ifelse(pred$Yes &gt; 0.45, &quot;Yes&quot;,&quot;No&quot;)) confusionMatrix(pred$result, data_test$Churn,positive = &quot;Yes&quot;) #&gt; Confusion Matrix and Statistics #&gt; #&gt; Reference #&gt; Prediction No Yes #&gt; No 849 109 #&gt; Yes 183 264 #&gt; #&gt; Accuracy : 0.7922 #&gt; 95% CI : (0.77, 0.8131) #&gt; No Information Rate : 0.7345 #&gt; P-Value [Acc &gt; NIR] : 0.00000031 #&gt; #&gt; Kappa : 0.4989 #&gt; #&gt; Mcnemar&#39;s Test P-Value : 0.00001937 #&gt; #&gt; Sensitivity : 0.7078 #&gt; Specificity : 0.8227 #&gt; Pos Pred Value : 0.5906 #&gt; Neg Pred Value : 0.8862 #&gt; Prevalence : 0.2655 #&gt; Detection Rate : 0.1879 #&gt; Detection Prevalence : 0.3181 #&gt; Balanced Accuracy : 0.7652 #&gt; #&gt; &#39;Positive&#39; Class : Yes #&gt; Pada kasus ini kita ingin memperoleh nila sensitivity/recall yang lebih besar, dengan menggunakan threshold sebesar 0.4 diperoleh nilai recall sebesar 0.70 dengan accuracy sebesar 0.79 dan precision sebesar 0.59. Dari model yang telah terbentuk kita dapat memperoleh nilai AUC pada model: library(ROCR) pred_prob &lt;- predict(object = forest_upc,newdata = data_test,type = &quot;prob&quot;) pred &lt;- prediction(pred_prob[,2],labels = data_test$Churn) perf &lt;- performance(prediction.obj = pred,measure = &quot;tpr&quot;,x.measure = &quot;fpr&quot;) plot(perf) auc &lt;- performance(pred,measure = &quot;auc&quot;) auc@y.values[[1]] #&gt; [1] 0.8513259 1.1.3 Conclusion library(lime) test_x &lt;- data_test %&gt;% dplyr::select(-Churn) explainer &lt;- lime(test_x, forest_upc) explanation &lt;- lime::explain(test_x[1:2,], explainer, labels = c(&quot;Yes&quot;), n_features = 8) plot_features(explanation) Setelah adanya model prediksi customer churn, pihak perusahaan telekomunikasi dapat dengan mudah mengetahui pelanggan yang memiliki kecendurungan akan churn. Kedua plot diatas memperlihatkan prediksi dua customer, kedua customer memiliki peluang besar untuk churn dan kita dapat mengetahui variabel mana yang supports dan contradicts terhadap hasil prediksi. Bab 2 Finance Placeholder 2.1 Credit Risk Analysis 2.1.1 Background 2.1.2 Modelling Analysis 2.1.2.1 Exploratory Data Analysis 2.1.2.2 Modelling 2.1.3 Recommendation 2.2 Evaluating Customer Financial Complaints 2.2.1 Background 2.2.2 Exploratory Data Analysis 2.2.3 Comparing Sentiment Dictionaries 2.2.4 Correlation Pairs Bab 3 Retail Placeholder 3.1 E-Commerce Clothing Reviews 3.1.1 Background 3.1.2 Cleaning Data 3.1.3 Modelling 3.1.4 Visualize Data Text Bab 4 Insurance Placeholder 4.1 Prediction of Total Claim Amount 4.1.1 Background 4.1.2 Modelling Analysis 4.1.2.1 Import Data 4.1.2.2 Exploratory Data 4.1.2.3 Modelling 4.1.3 Conclusion "]
]
